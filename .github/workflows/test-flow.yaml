name: Tests
on:
  workflow_call:
    inputs:
      from:
        required: true
        type: string

# This will cancel in progress jobs if another job with the same ref gets started.
# Github run_id is a backup in case github.ref doesn't exist for some reason
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  ci-checks:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4
      # TODO: caching this action would accelerate the run
      - name: corepack
        run: |
          npm install -g corepack@>=0.31.0
          corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: yarn.lock
      - name: install
        run: |
          yarn install --immutable
          # Hack - the yarn team refuses to not take over formatting the package.json
          git checkout package.json
      - name: commit-linting
        run: |
          if [[ "${{ github.base_ref }}" != "" ]]; then
            echo "Setting up git environment for commitlint of pull request"
            git fetch origin ${{ github.base_ref }}
            git fetch ${{ github.event.pull_request.head.repo.clone_url }} ${{ github.head_ref }}
            yarn commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose
          else
            echo "Setting up git environment for commitlint of branch push"
            git fetch origin ${{ github.ref_name }} --unshallow
            yarn commitlint --from $(git rev-list --max-parents=0 origin/${{ github.ref_name }})
          fi
      - name: build
        run: |
          yarn build
      - name: linting
        run: |
          yarn lint
      - name: formatting
        run: |
          yarn format
      - name: testing
        run: |
          yarn test
  pkg-test:
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        # os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        os: ['ubuntu-latest']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      # TODO: caching this action would accelerate the run
      - name: corepack
        run: |
          corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: yarn.lock
      - name: install
        run: |
          yarn install --immutable
      - name: build
        run: |
          yarn build
      - name: pkgtest
        run: |
          export PKG_TEST_TEMP_DIR="${RUNNER_TEMP}"
          npm install -g corepack@>=0.31.0
          # Unfortunately, since the machine is limited, running sync is fastest
          yarn pkgtest -p 1 --noYarnv1CacheClean
  ensure-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # TODO: caching this action would accelerate the run
      - name: corepack
        run: |
          corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: yarn.lock
      - name: install
        run: |
          yarn install --immutable
          # Hack - the yarn team refuses to not take over formatting the package.json
          git checkout package.json
      - name: generate typedoc
        run: |
          yarn typedoc
      - name: ensure no uncommitted docs
        shell: bash
        run: |
          git diff
          changes=$(git status --porcelain=v1 2>/dev/null)
          if [ ! -z "$changes" ]; then
              echo "Found typedoc generated files that weren't commited!"
              echo "Please run 'yarn typedoc', and commit the files"
              echo "$changes"
              exit 1
          fi
      - name: ensure no errors with mkdocs
        run: |
          pip install -r docs/requirements.txt
          mkdocs build --strict
  # easy to require end cap job
  done:
    needs:
      - ensure-docs
      - ci-checks
      - pkg-test
    runs-on: ubuntu-latest
    name: Done
    steps:
      - run: exit 1
        if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'skipped') || contains(needs.*.result, 'cancelled')) }}